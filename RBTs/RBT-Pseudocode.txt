LEFT-ROTATE(current):
	rChild = current's right child
	glChild = rChild's left child
	parent = current's parent
	
	set current's rChild = glChild
	if(glchild != sentinal) {
		set glChild's Parent = current
	}
	
	set rChild's parent = parent
	if(parent == sentinal) {
		root = rChild
	} else if(current == parent's left child) {
		set parent's left child = rChild
	} else {
		set parent's right child = rChild
	}
	
	set rChild's left child = current
	set current's parent = rChild		


RIGHT-ROTATE(current)
	lChild = current's left child
	grChild = lChild's right child
	parent = current's parent
	
	set current's lChild = grChild
	if(grchild != sentinal) {
		set grChild's Parent = current
	}
	
	set lChild's parent = parent
	if(parent == sentinal) {
		root = lChild
	} else if(current == parent's right child) {
		set parent's right child = lChild
	} else {
		set parent's left child = lChild
	}
	
	set lChild's right child = current
	set current's parent = lChild

INSERT(current){
	Call BST's INSERT to insert the node into the tree
	set left to sentinal
	set right to sentinal
	set current's color to RED
	if(current's parent == nullptr) {
		current's parent = sentinel
	}
	INSERT-FIXUP(current)
}

INSERT-FIXUP(current):
	parent = current's parent
	gParent = parent's parent
	
	while(parent's color is RED):
		parent = current's parent
		gParent = parent's parent
		if(parent == gParent's left child):
			uncle = gParents right child
			
			//case 1
			if(uncles color is red):
				set parent's color to black
				set uncles color to black
				set gParents color to red
				current = gParent
			else:
				if(current == parent's right child):
					current = parent
					ROTATE-LEFT(current)
					parent = current's parent
					gParent = parent's parent
				set parent's color to black
				set gParent's color to red
				RIGHT-ROTATE(gParent)
		else:
			same as above with left switched to right

	set the root's color to black

RB-DELETE(T, x)
     BST-DELETE(T, x)
     while x ≠ T.root and x.color == BLACK
        if x == x.parent.left
            s = x.parent.right
            if s.color == RED
                s.color = BLACK // case 3.1
                x.parent.color = RED // case 3.1
                LEFT-ROTATE(T, x.parent) // case 3.1
                s = x.parent.right // case 3.1
            if s.left.color == BLACK and s.right.color == BLACK
                s.color = RED // case 3.2
                x = x.parent //case 3.2
            else if s.right.color == BLACK
                    s.left.color = BLACK // case 3.3
                    s.color = RED //case 3.3
                    RIGHT-ROTATE(T, s) // case 3.3
                    s = x.parent.right // case 3.3
                s.color = x.parent.right // case 3.4
                x.parent.color = BLACK // case 3.4
                s.right.color = BLACK // case 3.4
                LEFT-ROTATE(T, x.parent) // case 3.4
                x = T.root
        else (same as then close with “right” and “left” exchanged)
    x.color = BLACK